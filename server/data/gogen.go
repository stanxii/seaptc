//+build ignore

package main

import (
	"bytes"
	"flag"
	"fmt"
	"go/format"
	"io/ioutil"
	"log"
	"os"
	"reflect"
	"strings"
	"text/template"

	"github.com/seaptc/server/data"
)

var protoValues = []interface{}{
	(*data.AppConfig)(nil),
	(*data.Class)(nil),
	(*data.Conference)(nil),
	(*data.Participant)(nil),
}

type typeInfo struct {
	Name      string
	MergeSets map[string][]string
	Fields    [][2]string
}

func getTypeInfo(t reflect.Type) *typeInfo {
	result := typeInfo{
		Name:      t.Name(),
		MergeSets: make(map[string][]string),
	}

	for i := 0; i < t.NumField(); i++ {
		f := t.Field(i)

		if f.PkgPath != "" && !f.Anonymous {
			continue
		}

		// Find name
		name := f.Name
		if t := f.Tag.Get("firestore"); t != "" {
			t = strings.Split(t, ",")[0]
			if t == "-" {
				continue
			}
			if t != "" {
				name = t
			}
		}

		result.Fields = append(result.Fields, [2]string{f.Name, name})

		if t := f.Tag.Get("merge"); t != "" {
			for _, set := range strings.Split(t, ",") {
				result.MergeSets[set] = append(result.MergeSets[set], f.Name)
			}
		}
	}
	return &result
}

var codeTemplate = template.Must(template.New("").Parse(`
// Code generated by gogen.go; DO NOT EDIT.

package data

import "cloud.google.com/go/firestore"

{{range $type := .}}
const (
    {{range $type.Fields -}}
    {{$type.Name}}_{{index . 0}} = {{printf "%q" (index . 1)}}
    {{end}}
)
{{end}}

{{range $type := .}}{{range $name, $fields := $type.MergeSets}}
var {{$type.Name}}Merge_{{$name}} = firestore.Merge(firestore.FieldPath{ 
    {{range $fields -}}
    {{$type.Name}}_{{.}},
    {{end}} })
{{end}}{{end}}
`))

func main() {
	log.SetFlags(0)
	file := flag.String("output", "", "Write code to `file`")
	flag.Parse()

	var types []*typeInfo
	for _, v := range protoValues {
		t := reflect.TypeOf(v).Elem()
		types = append(types, getTypeInfo(t))
	}
	var buf bytes.Buffer
	if err := codeTemplate.Execute(&buf, types); err != nil {
		log.Fatal(err)
	}
	out, err := format.Source(buf.Bytes())
	if err != nil {
		for i, p := range bytes.Split(buf.Bytes(), []byte("\n")) {
			fmt.Fprintf(os.Stderr, "%d: %s\n", i+1, p)
		}
		log.Fatalf("error formating source: %v", err)
	}

	if *file != "" {
		err = ioutil.WriteFile(*file, out, 0666)
		if err != nil {
			log.Fatal(err)
		}
		return
	}

	os.Stdout.Write(out)

}
