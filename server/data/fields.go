// Code generated by gogen.go; DO NOT EDIT.

package data

const (
	AppConfig_AdminIDs                       = "adminIDs"
	AppConfig_HMACKeys                       = "hmacKeys"
	AppConfig_LoginClient                    = "loginClient"
	AppConfig_PlanningSheetServiceAccountKey = "planningSheetServiceAccountKey"
	AppConfig_PlanningSheetURL               = "planningSheetURL"
	AppConfig_StaffIDs                       = "staffIDs"
	AppConfig_XSRFKey                        = "xsrfKey"
)

const (
	Class_AccessToken      = "accessToken"
	Class_Capacity         = "capacity"
	Class_DKHash           = "dkHash"
	Class_Description      = "description"
	Class_EvaluationCodes  = "evaluationCodes"
	Class_InstructorEmails = "instructorEmails"
	Class_InstructorNames  = "instructorNames"
	Class_Length           = "length"
	Class_Location         = "location"
	Class_New              = "new"
	Class_Number           = "number"
	Class_Programs         = "programs"
	Class_Responsibility   = "responsibility"
	Class_SpreadsheetRow   = "spreadsheetRow"
	Class_Title            = "title"
	Class_TitleNotes       = "titleNotes"
)

const (
	Conference_Day     = "day"
	Conference_Lunches = "lunches"
	Conference_Month   = "month"
	Conference_Year    = "year"
)

const (
	Participant_Address             = "address"
	Participant_BSANumber           = "bsaNumber"
	Participant_City                = "city"
	Participant_Classes             = "classes"
	Participant_Council             = "council"
	Participant_DietaryRestrictions = "dietaryRestrictions"
	Participant_District            = "district"
	Participant_Email               = "email"
	Participant_FirstName           = "firstName"
	Participant_InstructorClasses   = "instructorClasses"
	Participant_LastName            = "lastName"
	Participant_Marketing           = "marketing"
	Participant_Nickname            = "nickname"
	Participant_NoShow              = "noShow"
	Participant_Notes               = "notes"
	Participant_OABanquet           = "oaBanquet"
	Participant_Phone               = "phone"
	Participant_RegistrationNumber  = "registrationNumber"
	Participant_ScoutingYears       = "scoutingYears"
	Participant_ShowQRCode          = "showQRCode"
	Participant_Staff               = "staff"
	Participant_StaffDescription    = "staffDescription"
	Participant_StaffRole           = "staffRole"
	Participant_State               = "state"
	Participant_Suffix              = "suffix"
	Participant_UnitNumber          = "unitNumber"
	Participant_UnitType            = "unitType"
	Participant_Youth               = "youth"
	Participant_Zip                 = "zip"
)

func (x *Class) SheetFields() map[string]interface{} {
	return map[string]interface{}{
		"accessToken":      x.AccessToken,
		"capacity":         x.Capacity,
		"description":      x.Description,
		"evaluationCodes":  x.EvaluationCodes,
		"instructorEmails": x.InstructorEmails,
		"instructorNames":  x.InstructorNames,
		"length":           x.Length,
		"location":         x.Location,
		"new":              x.New,
		"number":           x.Number,
		"programs":         x.Programs,
		"responsibility":   x.Responsibility,
		"spreadsheetRow":   x.SpreadsheetRow,
		"title":            x.Title,
		"titleNotes":       x.TitleNotes,
	}
}

func (x *Participant) DKFields() map[string]interface{} {
	return map[string]interface{}{
		"address":             x.Address,
		"bsaNumber":           x.BSANumber,
		"city":                x.City,
		"classes":             x.Classes,
		"council":             x.Council,
		"dietaryRestrictions": x.DietaryRestrictions,
		"district":            x.District,
		"email":               x.Email,
		"firstName":           x.FirstName,
		"lastName":            x.LastName,
		"marketing":           x.Marketing,
		"nickname":            x.Nickname,
		"oaBanquet":           x.OABanquet,
		"phone":               x.Phone,
		"registrationNumber":  x.RegistrationNumber,
		"scoutingYears":       x.ScoutingYears,
		"showQRCode":          x.ShowQRCode,
		"staff":               x.Staff,
		"staffDescription":    x.StaffDescription,
		"staffRole":           x.StaffRole,
		"state":               x.State,
		"suffix":              x.Suffix,
		"unitNumber":          x.UnitNumber,
		"unitType":            x.UnitType,
		"youth":               x.Youth,
		"zip":                 x.Zip,
	}
}
